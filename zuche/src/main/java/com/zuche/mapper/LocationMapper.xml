<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zuche.mapper.LocationMapper" >
  <resultMap id="BaseResultMap" type="com.zuche.entity.Location" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="orders_id" property="ordersId" jdbcType="VARCHAR" />
    <result column="user_car_id" property="userCarId" jdbcType="INTEGER" />
    <result column="getAddress" property="getaddress" jdbcType="VARCHAR" />
    <result column="getLongitude" property="getlongitude" jdbcType="REAL" />
    <result column="getLatitude" property="getlatitude" jdbcType="REAL" />
    <result column="returnAddress" property="returnaddress" jdbcType="VARCHAR" />
    <result column="returnLongitude" property="returnlongitude" jdbcType="REAL" />
    <result column="returnLatitude" property="returnlatitude" jdbcType="REAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, orders_id, user_car_id, getAddress, getLongitude, getLatitude, returnAddress, 
    returnLongitude, returnLatitude
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zuche.entity.LocationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from location
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from location
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from location
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zuche.entity.LocationExample" >
    delete from location
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zuche.entity.Location" >
    insert into location (id, orders_id, user_car_id, 
      getAddress, getLongitude, getLatitude, 
      returnAddress, returnLongitude, returnLatitude
      )
    values (#{id,jdbcType=INTEGER}, #{ordersId,jdbcType=VARCHAR}, #{userCarId,jdbcType=INTEGER}, 
      #{getaddress,jdbcType=VARCHAR}, #{getlongitude,jdbcType=REAL}, #{getlatitude,jdbcType=REAL}, 
      #{returnaddress,jdbcType=VARCHAR}, #{returnlongitude,jdbcType=REAL}, #{returnlatitude,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zuche.entity.Location" >
    insert into location
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="ordersId != null" >
        orders_id,
      </if>
      <if test="userCarId != null" >
        user_car_id,
      </if>
      <if test="getaddress != null" >
        getAddress,
      </if>
      <if test="getlongitude != null" >
        getLongitude,
      </if>
      <if test="getlatitude != null" >
        getLatitude,
      </if>
      <if test="returnaddress != null" >
        returnAddress,
      </if>
      <if test="returnlongitude != null" >
        returnLongitude,
      </if>
      <if test="returnlatitude != null" >
        returnLatitude,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="ordersId != null" >
        #{ordersId,jdbcType=VARCHAR},
      </if>
      <if test="userCarId != null" >
        #{userCarId,jdbcType=INTEGER},
      </if>
      <if test="getaddress != null" >
        #{getaddress,jdbcType=VARCHAR},
      </if>
      <if test="getlongitude != null" >
        #{getlongitude,jdbcType=REAL},
      </if>
      <if test="getlatitude != null" >
        #{getlatitude,jdbcType=REAL},
      </if>
      <if test="returnaddress != null" >
        #{returnaddress,jdbcType=VARCHAR},
      </if>
      <if test="returnlongitude != null" >
        #{returnlongitude,jdbcType=REAL},
      </if>
      <if test="returnlatitude != null" >
        #{returnlatitude,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zuche.entity.LocationExample" resultType="java.lang.Integer" >
    select count(*) from location
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update location
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.ordersId != null" >
        orders_id = #{record.ordersId,jdbcType=VARCHAR},
      </if>
      <if test="record.userCarId != null" >
        user_car_id = #{record.userCarId,jdbcType=INTEGER},
      </if>
      <if test="record.getaddress != null" >
        getAddress = #{record.getaddress,jdbcType=VARCHAR},
      </if>
      <if test="record.getlongitude != null" >
        getLongitude = #{record.getlongitude,jdbcType=REAL},
      </if>
      <if test="record.getlatitude != null" >
        getLatitude = #{record.getlatitude,jdbcType=REAL},
      </if>
      <if test="record.returnaddress != null" >
        returnAddress = #{record.returnaddress,jdbcType=VARCHAR},
      </if>
      <if test="record.returnlongitude != null" >
        returnLongitude = #{record.returnlongitude,jdbcType=REAL},
      </if>
      <if test="record.returnlatitude != null" >
        returnLatitude = #{record.returnlatitude,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update location
    set id = #{record.id,jdbcType=INTEGER},
      orders_id = #{record.ordersId,jdbcType=VARCHAR},
      user_car_id = #{record.userCarId,jdbcType=INTEGER},
      getAddress = #{record.getaddress,jdbcType=VARCHAR},
      getLongitude = #{record.getlongitude,jdbcType=REAL},
      getLatitude = #{record.getlatitude,jdbcType=REAL},
      returnAddress = #{record.returnaddress,jdbcType=VARCHAR},
      returnLongitude = #{record.returnlongitude,jdbcType=REAL},
      returnLatitude = #{record.returnlatitude,jdbcType=REAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zuche.entity.Location" >
    update location
    <set >
      <if test="ordersId != null" >
        orders_id = #{ordersId,jdbcType=VARCHAR},
      </if>
      <if test="userCarId != null" >
        user_car_id = #{userCarId,jdbcType=INTEGER},
      </if>
      <if test="getaddress != null" >
        getAddress = #{getaddress,jdbcType=VARCHAR},
      </if>
      <if test="getlongitude != null" >
        getLongitude = #{getlongitude,jdbcType=REAL},
      </if>
      <if test="getlatitude != null" >
        getLatitude = #{getlatitude,jdbcType=REAL},
      </if>
      <if test="returnaddress != null" >
        returnAddress = #{returnaddress,jdbcType=VARCHAR},
      </if>
      <if test="returnlongitude != null" >
        returnLongitude = #{returnlongitude,jdbcType=REAL},
      </if>
      <if test="returnlatitude != null" >
        returnLatitude = #{returnlatitude,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zuche.entity.Location" >
    update location
    set orders_id = #{ordersId,jdbcType=VARCHAR},
      user_car_id = #{userCarId,jdbcType=INTEGER},
      getAddress = #{getaddress,jdbcType=VARCHAR},
      getLongitude = #{getlongitude,jdbcType=REAL},
      getLatitude = #{getlatitude,jdbcType=REAL},
      returnAddress = #{returnaddress,jdbcType=VARCHAR},
      returnLongitude = #{returnlongitude,jdbcType=REAL},
      returnLatitude = #{returnlatitude,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>